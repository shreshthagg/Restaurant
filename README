
# Application overview

We have created a web application for a restaurant, specifically a french-inspired bakery. We have incorporated some major components that are typically seen
in any restaurant’s website such as a home page, menu, and sections for “About Us”, “Reviews”, and “Contact Us”. 
We used ReactJS for the front-end. The front-end can fetch data and create POST requests using the Rest API. The API is connected to MongoDB, 
which stores user contact information. The front-end incorporates test-driven development to ensure that all the components and pages render and function as expected.
Purpose: The main purpose of the website is to market the restaurant (La Petite Pâtisserie) by providing basic information about this restaurant.
It aims to work as a medium to attract potential customers. We also provide a way for our customers to contact us or get to know about the range of delicacies we offer.

# Technologies used:
ReactJs, JS, CSS, VSCode, APIs, MongoDB

# Functions: 
The menu action fetches information from the API and the menu is dynamic, hence it can be updated easily. 
We included a navigation bar that allows the user to travel to all the different pages on the website. 
The ‘Contact Us’ form stores customer’s information in a database, though currently, this only works during local development since it requires a password. 
We made all the pages responsive to different screen resolutions.
Upon clicking a menu item, its ingredients are displayed.

# Constraints: 
Not being able to get real-time reviews from our customers.
Not being able to deploy the website on a server.
Having to manually connect to the database in order for it to store the contact information.

# Development process:
Group together as a team and discuss to decide our product and purpose.
Brainstorming the different components that could be included in the application.
Finalize the components and decide where the strict requirements of this project would be implemented.
Break down the entire project into smaller parts and assign tasks to each group member for individual work.
Set a schedule to meet every two days to check the progress of each member’s task, and to also discuss and solve some problems that we faced.



# Challenges faced: 
Different elements of the website required different styles and different functionalities, but used the same class names (or lacked a class name) which caused some issues. The CSS styling attributes became global and affected pages that we did not mean to alter.
Solution: We had to be more careful and specific when choosing class names in the CSS files, and to ensure that we used class names whenever possible for specific elements of a page.
Constructing artistic UIs and balancing usability and aesthetics. We wanted the page to be appealing, but to still be functional and easy to use.
Solution: Use other restaurant websites as inspiration by taking a look at their methods of combining aesthetics and functionalities. By doing this, we gained a better understanding of how to visually and functionally improve our website.
Initially the contact form information was being sent to one of our emails, however that didn’t allow us to store all the information in a single place.
Solution: Implemented the use of MongoDB to store the information from the submitted forms in one database.
Since some members were in different time-zones, clear communication was a challenge. Due to this, some members missed meetings or messages and it was difficult to schedule meetings.
Solution: To tackle this, we tried to work around everyone’s schedule by having meetings when the majority of members were available. We are introducing weekly LettuceMeets to view each other’s availability to make it easier to schedule calls and arrange work times.

# Plans for improvement: 
Adding a section where customers can submit their reviews, as well as adding a sorting functionality for the reviews for increased usability.
Incorporating a staff section to showcase the staff that works at this restaurant.
Adding an order section to enable customers to place an order online to enhance convenience and accessibility.
Testing all functions and components to ensure that everything works.
Getting the contact form submission to operate without having to connect to the database each time.

